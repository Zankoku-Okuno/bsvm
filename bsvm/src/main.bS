.shebang /usr/bin/env bsvm
.entrypoint &_start

.func main
  .reg asm, ofile, ofilelen = ofile, ofilestr
  .reg fp, msg, msglen = msg, msgstr
  .reg i, argc, noOpts
  .reg arg, arglen = arg, argstr
  .reg c, t1
  ;;; ofile, noOpts = NULL, False
  mov ofilelen, 0
  mov ofilestr, 0
  mov noOpts, $False
  ;;; asm = Asm.new()
  jal &Asm.new
  into asm

  ;;; for (i = 1, i < argc, ++i) {
  mov i, 1
  argc argc
  @loop:
  lt c, i, argc
  zjmp c, @loop.done
    ;;; arg = argv[i]
    lea arg, arg
    argv arg, i
    ;;; if noOpts { goto no-opts() }
    cjmp noOpts, @no-opts

    ;;; elif arg == "--help" {
    eq c, arglen, $main.opt.help.len
    zjmp c, @help.no
    lia t1, &main.opt.help
    meq c, argstr, t1, arglen
    zjmp c, @help.no
      ;;; Print.asciiz(stdout, main.msg.help); break
      strm fp, 1
      lia msgstr, &main.msg.help
      jal &Print.asciiz, fp, msgstr
      jmp @loop.break
    ;;; }
    @help.no:

    ;;; elif arg == "--version" {
    eq c, arglen, $main.opt.version.len
    zjmp c, @version.no
    lia t1, &main.opt.version
    meq c, argstr, t1, arglen
    zjmp c, @version.no
      ;;; Print.asciiz(stdout, main.msg.version); break
      strm fp, 1
      lia msgstr, &main.msg.version
      jal &Print.asciiz, fp, msgstr
      jmp @loop.break
    ;;; }
    @version.no:

    ;;; elif arg == "--output" || arg == "-O" {
    eq c, arglen, $main.opt.output.len
    zjmp c, @output.2
    lia t1, &main.opt.output
    meq c, argstr, t1, arglen
    zjmp c, @output.2
    jmp @is-output
    @output.2:
    eq c, arglen, $main.opt.O.len
    zjmp c, @output.no
    lia t1, &main.opt.O
    meq c, argstr, t1, arglen
    zjmp c, @output.no
    @is-output:
      ;;; if ofile == NULL {
      cjmp ofilestr, @ofile-dblset
        ;;; arg = argv[++i]
        add i, 1
        lt c, i, argc
        cjmp c, @inc-ok
          ;;; Print.asciiz(stderr, main.msg.version); break
          strm fp, 2
          lia msgstr, &main.msg.err.missingOutput
          jal &Print.asciiz, fp, msgstr
          jmp @loop.break
        @inc-ok:
        lea arg, arg
        argv arg, i
        ;;; ofile = arg; continue
        mov ofilelen, arglen
        mov ofilestr, argstr
        jmp @loop.continue
      ;;; } else {
      @ofile-dblset:
        ;;; write(stderr, main.msg.err.doubleOutput); break
        strm fp, 2
        lia msgstr, &main.msg.err.doubleOutput
        jal &Print.asciiz, fp, msgstr
        jmp @loop.break
      ;;; }
    ;;; }
    @output.no:

    ;;; elif arg == "--" {
    eq c, arglen, $main.opt.dashdash.len
    zjmp c, @dashdash.no
    lia t1, &main.opt.dashdash
    meq c, argstr, t1, arglen
    zjmp c, @dashdash.no
      ;;; noOpts = True; continue
      mov noOpts, $True
      jmp @loop.continue
    ;;; }
    @dashdash.no:

    ;;; else no-opts: {
    @no-opts:
      ;;; asmFile(asm, arg.str)
      jal &asmFile, asm, argstr
    ;;; }

  ;;; }
  @loop.continue:
  add i, 1
  jmp @loop
  ;;; exitwhen {
    ;;; break() { exit(1) }
      @loop.break:
      mov %0, 1
      exit %0
  ;;; }
  @loop.done:
  ;;; exit(0)
  mov %0, 0
  exit %0
  ; FIXME free the asm


.func asmFile, self, fnamez
  .reg fp, line
  .reg t1, t2
;  ;;; DEBUG
;    ;;; Print.asciiz(stderr, fnamez + '\n')
;    strm fp, 2
;    jal &Print.asciiz, fp, fnamez
;    jal &Print.nl, fp
  ;;; fp = fopen(fnamez, 'r')
  open 0, fp, fnamez
  zjmp fp, @error.no-fp
  ;;; Asm.startFile(self, fnamez)
  jal &Asm.startFile, self, fnamez
  ;;; loop {
  @loop:
    ;;; line = File.readline(fp)
    lia t1, @loop.done
    lia t2, @error
    jal &File.readline, fp, t1, t2
    into line
    ;;; asmLine(self, line)
    jal &asmLine, self, line
    ;;; ByteBuf.del(line)
    jal &ByteBuf.del, line
  ;;; }
  jmp @loop
  @loop.done:
  ;;; Asm.endFile(self); fclose(fp); return
  jal &Asm.endFile, self
  clos fp
  ret
@error:
  clos fp
@error.no-fp:
  ;;; die(main.msg.err.fileRead + fnamez + "\n")
  strm fp, 2
  lia t1, &main.msg.err.fileRead
  jal &Print.asciiz, fp, t1
  jal &Print.asciiz, fp, fnamez
  jal &Print.nl, fp
  mov %0, 1
  exit %0

; self: &Asm
; line: &ByteBuf
.func asmLine, self, line
  .reg line.split
  off line, $ByteBuf.lenstr
  ;;; DEBUG
    .reg df, d1
    strm df, 2
    jal &Print.lenstr, df, line
    jal &Print.nl, df
  jal &Parse.line, line
  into line.split
  ;;; DEBUG
    zjmp line.split, @null-line
    mov d1, 116; 't'
    putb df, d1
    ld d1, line.split, $Line.type
    jal &Print.char, df, d1
    mov d1, 32; ' '
    putb df, d1
    mov d1, 96; '\`'
    putb df, d1
    ld d1, line.split, $Line.name
    jal &Print.lenstr, df, d1
    mov d1, 96; '\`'
    putb df, d1
    jal &Print.nl, df
  jal &Line.del, line.split
  @null-line:
  ret


.func _start
  ;;; TODO initialize constants
  jar &main

; goto here if memory is ever exhausted
oom:
  ; TODO
  hcf
