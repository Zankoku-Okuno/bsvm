; This contains data describing a line:
;   both the type of the line, and
;   references to the extracted (but not-yet fully parsed) references to
;     the name of the label/directive/instruction, and
;     any arguments.
;;; struct Line {
  ;;; type: LineType
  .def Line.type 0
  ;;; name: *ByteSlice
  .def Line.name 1
  ;;; args: ?*ArrayBuf<*ByteSlice>
  .def Line.args 2
;;; }
.def Line.sizeof 3

; Describes whether an input line is a label, directive, or instruction.
;;; enum LineType {
  ;;; label = 0
  .def LineType.label 0
  ;;; dir = 1
  .def LineType.dir 1
  ;;; instr = 2
  .def LineType.instr 2
;;; }

; Destroy a line created by Parse.line
.func Line.del, self
  .reg c, t1
  ;;; free(self->name)
  ld t1, self, $Line.name
  free t1
  ;;; when (args = self->args) != NULL {
  .reg args
  ld args, self, $Line.args
  zjmp args, @no-args
    ;;; for (i = 0, e = args->len; i < e; ++i) {
    .reg i, e
    mov i, 0
    ld e, args, $ArrayBuf.len
    @loop:
    lt c, i, e
    zjmp c, @loop.end
      ;;; arg = args->arr[i]
      .reg arg
      ld t1, args, $ArrayBuf.arr
      off t1, i
      ld arg, t1
      ;;; ByteSlice.del(arg)
      jal &ByteSlice.del, arg
    ;;; }
    add i, 1
    jmp @loop
    @loop.end:
    ;;; ArrayBuf.del(args)
    jal &ArrayBuf.del, args
  ;;; }
  @no-args:
  ;;; free(self)
  free self
  ret

; Create a new Line struct given a single line from an input file.
; Returns null when the input line is empty (also ignoring comments).
;
; line: &lenstr<_>
; return ?*Line
.func Parse.line, line
  .reg self, type, name, args
  .reg char0
  .reg zero, c, t1
  mov zero, 0
  ;;; line = ByteSlice.copy(line)
  jal &ByteSlice.copy, line
  into line
  ;;; Parse.skipWs(line)
  jal &Parse.skipWs, line
  ;;; if line->len == 0 { goto empty-line }
  ld t1, line, $ByteSlice.len
  zjmp t1, @empty-line
  ;;; } elif line->str[0] == ';' { goto empty-line }
  ld t1, line, $ByteSlice.str
  ldb char0, t1
  eq c, char0, 59
  cjmp c, @empty-line
  ;;; } elif line->str[0] == '.' {
  eq c, char0, 46
  zjmp c, @non-directive
    ;;; ByteSlice.pop(line, undefined)
    jal &ByteSlice.pop, line, zero
    ;;; type, name = LineType.dir, Parse.name(line)
    mov type, $LineType.dir
    jal &Parse.name, line
    into name
    ;;; Parse.skipWs(line)
    jal &Parse.skipWs, line
    ;;; return Parse.args(line, type, name)
    jar &Parse.args, line, type, name
  ;;; } else {
  @non-directive:
    ;;; name = Parse.name(line); Parse.skipWs(line)
    jal &Parse.name, line
    into name
    jal &Parse.skipWs, line
    ;;; if line->len && line->str[0] == ':' {
    ld t1, line, $ByteSlice.len
    zjmp t1, @non-label
    ld t1, line, $ByteSlice.str
    ldb t1, t1
    eq c, t1, 58
    zjmp c, @non-label
      ;;; self = malloc(sizeof(Line))
      mov t1, 0
      off t1, $Line.sizeof
      new self, t1
      ;;; self->{type,name,args} = LineType.label, name, 0
      mov type, $LineType.label
      st self, $Line.type, type
      st self, $Line.name, name
      st self, $Line.args, zero
      ;;; free(line); return self
      jal &ByteSlice.del, line
      ret self
    ;;; } else {
      @non-label:
      ;;; return Parse.args(line, LineType.instr, name)
      mov type, $LineType.instr
      jar &Parse.args, line, type, name
    ;;; }
  ;;; }
@empty-line:
  ;;; free(line); return NULL
  jal &ByteSlice.del, line
  ret zero

; Consume the longest prefix of the input line that matches r/[A-Za-z0-9@._-]+/.
;
; line: &ByteSlice
; return *ByteSlice
.func Parse.name, line
  .reg name, i, char
  .reg zero, c, t1
  mov zero, 0
  ;;; name = ByteSlice.copy(line)
  jal &ByteSlice.copy, line
  into name
  ;;; i = 0; loop {
  mov i, 0
  @loop:
    ;;; char = ByteSlice.index(line, 0, @loop.end)
    lia t1, @loop.end
    jal &ByteSlice.index, line, zero, t1
    into char
    ;;; while char in [a-zA-Z0-9@._-]
      jal &Ascii.isAlphaNum, char
      into c
      cjmp c, @loop.no-break
      lia t1, &Parse.CHARSET.name
      jal &Ascii.in, char, t1
      into c
      cjmp c, @loop.no-break
      jmp @loop.end
  @loop.no-break:
    ;;; ++i; ByteSlice.pop(line, undefined)
    add i, 1
    jal &ByteSlice.pop, line, zero
  ;;; }
  jmp @loop
  @loop.end:
  ;;; return name{len = i}
  st name, $ByteSlice.len, i
  ret name

Parse.CHARSET.name:
  .ascii '@.-_',0

; Helper function that extracts comma-separated args and create a Line.
;
; line: *ByteSlice
; type: LineType
; name: *ByteSlice
; return *Line
.func Parse.args, line, type, name
  .reg self, args, char
  .reg zero
  mov zero, 0
  .reg c, t1, afterCommit
  ;;; args = ArrayBuf.new(4)
  mov t1, 4
  jal &ArrayBuf.new, t1
  into args
  ;;; when line->length != 0 {
  ld t1, line, $ByteSlice.len
  zjmp t1, @collectArgs.done
    ;;; loop collectArgs {
    @collectArgs:
      .reg i, j, outOfString
      ;;; i = 0
      mov i, 0
      mov outOfString, 1
      ;;; loop take {
      @take:
        ;;; char = ByteSlice.index(line, i, nil)
        lia afterCommit, @nil
        lia t1, @commit
        jal &ByteSlice.index, line, i, t1
        into char
        ;;; if char == '\'' {
        eq c, char, 39; '\''
        zjmp c, @testQuote.else
          ;;; outOfString = !outOfString
          not outOfString, outOfString
        ;;; } else {
        jmp @testQuote.end
        @testQuote.else:
          ;;; when char == ';' { break collectArgs }
          lia afterCommit, @collectArgs.done
          eq c, char, $Ascii.semicolon
          cjmp c, @commit
          ;;; when char == ',' && outOfString { exit nextArg }
          lia afterCommit, @nextArg
          eq c, char, $Ascii.comma
          and c, outOfString
          cjmp c, @commit
        ;;; }
        @testQuote.end:
        ;;; i += 1
        add i, 1
      ;;; }
      jmp @take
      @take.done:
    ;;; } when {
      ;;; finally {
      @commit:
        mov j, i
        ;;; loop {
        @rtrim:
          ;;; while j != 0
          zjmp j, @rtrim.end
          ;;; while Ascii.in(ByteSlice.index(line, j-1, undefined), " \t")
          mov t1, j
          sub t1, 1
          jal &ByteSlice.index, line, t1, zero
          into char
          lia t1, &Parse.wsChars
          jal &Ascii.in, char, t1
          into c
          zjmp c, @rtrim.end
          ;;; j--
          sub j, 1
        ;;; }
        jmp @rtrim
        @rtrim.end:
        ;;; ArrayBuf.append(args, ByteSlice.new(line, 0, j, undefined), undefined)
        jal &ByteSlice.new, line, zero, j, zero
        into t1
        jal &ArrayBuf.append, args, t1, zero
      ;;; }
      jmpr afterCommit
      ;;; nextArg {
      @nextArg:
        ;;; ByteSlice.drop(line, i + 1)
        mov t1, i
        add t1, 1
        jal &ByteSlice.drop, line, t1
        jal &Parse.skipWs, line
      ;;; }
      jmp @collectArgs
      ;;; nil { break }
      @nil:
    ;;; }
  ;;; }
  @collectArgs.done:
  ;;; self = malloc(sizeof(Line))
  mov t1, 0
  off t1, $Line.sizeof
  new self, t1
  ;;; self->{type,name,args} = type, name, args
  st self, $Line.type, type
  st self, $Line.name, name
  st self, $Line.args, args
  ;;; ByteSlice.del(line); return self
  jal &ByteSlice.del, line
  ret self

; input: &ByteSlice
.func Parse.skipWs, input
  .reg char
  .reg zero, c, t1
  mov zero, 0
  ;;; loop {
  @loop:
    ;;; char = ByteSlice.index(input, 0, return)
    lia t1, @return
    jal &ByteSlice.index, input, zero, t1
    into char
    ; FIXME use Ascii.in
    ;;; while char == ' ' || char == '\t'
    eq c, char, 32
    eq t1, char, 9
    or c, t1
    zjmp c, @loop.done
    ;;; ByteSlice.pop(input, undefined)
    jal &ByteSlice.pop, input, zero
  ;;; }
  jmp @loop
  @loop.done:
@return:
  ret

Parse.wsChars:
  .ascii 32,9,0
