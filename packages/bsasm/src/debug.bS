; Print a representation of a decoded line of assembly (i.e. for debug purposes).
;
; fp: file
; self: ?&Line
.func Print.Line, fp, self
  .reg ty
  .reg c, t1, t2
  ;;; when self == NULL { return }
  zjmp self, @null
  ;;; ty = ["label ", "directive ", "instruction "][self->type]
  ld ty, self, $Line.type
  cjmp ty, @non-label
    lia ty, @label.msg
    jmp @type-determined
  @non-label:
  sub ty, 1
  cjmp ty, @non-directive
    lia ty, @directive.msg
    jmp @type-determined
  @non-directive:
  sub ty, 1
  cjmp ty, @non-instruction
    lia ty, @instruction.msg
    jmp @type-determined
  @non-instruction:
    hcf
  ;;; println(ty + self->name)
  @type-determined:
  jal &Print.asciiz, fp, ty
  ld t1, self, $Line.name
  jal &Print.lenstr, fp, t1
  jal &Print.nl, fp
  ;;; if (self->args != NULL) for (i = 0; i < self->args->len; ++i) {
  ld t1, self, $Line.args
  zjmp t1, @loop.done
  .reg i, len
  mov i, 0
  ld len, t1, $ArrayBuf.len
  @loop:
  bl c, i, len
  zjmp c, @loop.done
    ;;; println("\t" + self->args->arr[i])
    mov t1, 9
    putb fp, t1
    ld t1, self, $Line.args
    ld t1, t1, $ArrayBuf.arr
    off t1, i
    ld t1, t1
    jal &Print.lenstr, fp, t1
    jal &Print.nl, fp
  ;;; }
  add i, 1
  jmp @loop
  @loop.done:
@null:
  ret
@label.msg:
  .ascii 'label ',0
@directive.msg:
  .ascii 'directive ',0
@instruction.msg:
  .ascii 'instruction ',0
