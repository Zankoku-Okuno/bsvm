.entrypoint &main

.func main
  .reg fp
  strm fp, 1
  jal &test.newDel, fp
  jal &test.copy, fp
  jal &test.index, fp
  jal &test.pop, fp
  mov %0, 0
  exit %0


hello:
  .ascii 'Hello, world!', 10
hello.end:
  .ascii 0

.func test.newDel, fp
  .reg slice
  .reg msg, msg.len = msg, msg.str, msgp
  mov msg.len, &hello.end - &hello
  lia msg.str, &hello
  lea msgp, msg
  .reg t1, t2, t3
  mov t1, 7
  mov t2, 5
  lia t3, @oob
  jal &ByteSlice.new, msgp, t1, t2, t3
  into slice
  zjmp slice, @oom
  jal &Print.lenstr, fp, slice
  jal &Print.nl, fp
  jar &ByteSlice.del, slice
@oom:
  lia t1, &oomMsg
  jal &Print.asciiz, fp, t1
  ret
@oob:
  lia t1, &oobMsg
  jal &Print.asciiz, fp, t1
  ret

.func test.copy, fp
  .reg slice
  .reg msg, msg.len = msg, msg.str, msgp
  mov msg.len, &hello.end - &hello
  lia msg.str, &hello
  lea msgp, msg
  .reg t1
  jal &ByteSlice.copy, msgp
  into slice
  zjmp slice, @oom
  jal &Print.lenstr, fp, slice
  jar &ByteSlice.del, slice
@oom:
  lia t1, &oomMsg
  jal &Print.asciiz, fp, t1
  ret

.func test.index, fp
  .reg slice, i, char
  .reg msg, msg.len = msg, msg.str, msgp
  mov msg.len, &hello.end - &hello
  lia msg.str, &hello
  lea msgp, msg
  .reg t1, on-oob
  jal &ByteSlice.copy, msgp
  into slice
  zjmp slice, @oom
  lia on-oob, @on-oob
  mov i, 0
  @loop:
    jal &ByteSlice.index, slice, i, on-oob
    into char
    jal &Print.byte, fp, char
    mov t1, 32
    putb fp, t1
    add i, 1
    jmp @loop
  @on-oob:
  jal &Print.nl, fp
  jar &ByteSlice.del, slice
@oom:
  lia t1, &oomMsg
  jal &Print.asciiz, fp, t1
  ret

.func test.pop, fp
  .reg slice, char
  .reg msg, msg.len = msg, msg.str, msgp
  mov msg.len, &hello.end - &hello
  lia msg.str, &hello
  lea msgp, msg
  .reg t1, on-nil
  jal &ByteSlice.copy, msgp
  into slice
  zjmp slice, @oom
  lia on-nil, @on-nil
  @loop:
    jal &ByteSlice.pop, slice, on-nil
    into char
    putb fp, char
    mov char, 32
    putb fp, char
    jal &Print.lenstr, fp, slice
    jmp @loop
  @on-nil:
  jar &ByteSlice.del, slice
@oom:
  lia t1, &oomMsg
  jal &Print.asciiz, fp, t1
  ret


oomMsg:
  .ascii 'out of memory', 10, 0
oobMsg:
  .ascii 'index out of bounds', 10, 0