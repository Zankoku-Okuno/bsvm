; This file contains helper functions for writing human-readble data.
;
; export Print.nl
; export Print.{lenstr,asciiz}
; export Print.{byte,word}

; Print a (UNIX-style) newline
.func Print.nl, fp
  .reg char
  mov char, 10
  putb fp, char
  ret

; Print a length-tagged string.
.func Print.lenstr, fp, msg
  put fp, msg
  ret

; Print a NUL-terminated string.
.func Print.asciiz, fp, msg
  .reg char
  ;;; loop {
  @loop:
    ;;; char = *(msg++)
    ldb char, msg
    add msg, 1
    ;;; while char != 0
    zjmp char, @loop.done
    ;;; put(fp, char)
    putb fp, char
  ;;; }
  jmp @loop
  @loop.done:
  ;;; return
  ret

; Print a word as unsigned hexadecimal, including leading zeros.
; There is no prefix/suffix to indicate the base, just the digits.
.func Print.word, fp, val
  .reg i, nybble
  .reg c
  ;;; i = sizeof(word) * 8 // to get bits per word
  mov i, 0
  off i, 8
  ;;; loop {
  @loop:
    ;;; i -= 4
    sub i, 4
    ;;; nybble = (val >> i) & 0x0F
    szr nybble, val, i
    and nybble, Fh
    ;;; Print.nybble(fp, val)
    jal &Print.nybble, fp, nybble
  ;;; } while i != 0
  cjmp i, @loop
  ret

; Helper procedure for Print.{byte,word}.
; Print a nybble.
; If the passed value is not in the range 0xF, the result is undefined.
.func Print.nybble, fp, val
  .reg c
  ;;; val += '0'
  add val, 48
  ;;; when !(val < ':') { val += 'A' - ':' }
  lt c, val, 58
  cjmp c, @ok
  add val, 65 - 58
  @ok:
  ;;; putc(fp, val); return
  putb fp, val
  ret

; Print a byte with two hexadecimal digits.
; Like Print.word, this only prints the digits, nothing more.
.func Print.byte, fp, b
  .reg mask
  .reg c, t1
  ;;; {
    ;;; t1 = ((b >> 4) & 0x0F) + 48
    szr t1, b, 4
    and t1, 0Fh
    add t1, 48
    ;;; when !(t1 < 58) { t1 += 65 - 58 }
    bl c, t1, 58
    cjmp c, @skip1
      add t1, 65 - 58
    @skip1:
    ;;; putc(t1)
    putb fp, t1
  ;;; }
  ;;; {
    ;;; t1 = (b & 0x0F) + 48
    mov t1, b
    and t1, 0Fh
    add t1, 48
    ;;; when !(t1 < 58) { t1 += 65 - 58 }
    bl c, t1, 58
    cjmp c, @skip2
      add t1, 65 - 58
    @skip2:
    ;;; putc(t1)
    putb fp, t1
  ;;; }
  ret



; Print some crap to stderr as a debug technique
.func Print.crap
  .reg fp, msg
  strm fp, 2
  lia msg, @msg
  jar &Print.asciiz, fp, msg
@msg:
  .ascii 'HELLO',10,0